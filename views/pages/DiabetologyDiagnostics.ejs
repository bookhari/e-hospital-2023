<!-- Diabetology, code started for accessing ML Model (Jennifer Rovt, Ramis Ileri, Sridhanussh Srinivasan) Group 1, Course-BMG5111, Winter 2023 -->


<!DOCTYPE html>
<html lang="en-CA">

<meta http-equiv="content-type" content="text/html;charset=utf-8" />

<head>
  <meta charSet="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="author" content="E-Hospital" />

  <meta property="og:url" content="register.html" />
  <meta property="og:site_name" content="E-Hospital" />
  <meta property="og:title" content="E-Hospital" />
  <meta property="og:type" content="website" />
  <meta property="og:image" content="https://img1.wsimg.com/isteam/stock/Ddj9aVd" />
  <meta property="og:locale" content="en_CA" />
  <link href="css/diabetesmlfrontend.css" rel="stylesheet" type="text/css">
  <style>
      .spinner {
    border: 5px solid #9b59b6;
    border-top-color: #9b59b6;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    animation: spin 1s linear infinite;
    margin: 0 auto;
  }
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  .black-button {
    display: flex;
    justify-content: center;

  }

  .black-button input[type="submit"] {
    background: linear-gradient(-135deg, #747474, rgb(0, 0, 0));
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 25px;
    font-size: 16px;
    max-width: 400px;
    width: 300px;

  }

  .black-button input[type="submit"]:hover {
    background: linear-gradient(-135deg, #000000, #747474);
  }
  </style>

  
  <link rel="stylesheet" type="text/css" href="/css/diabetology.css" />
  <title>E-Hospital | Diabetology</title>

</head>

<header>
    <%- include('../partials/header') -%>
</header>


<div class="container">
  <div class="title">Assess Your Risk of Developing Diabetes</div>
 
 <p id="log" style="
    color:rgb(50, 60, 133); 
    font-weight: bold;
    font-size: larger;
    text-align: left;
    margin-top: 3rem;">
    Result
  </p>
  
  <div class="content">

    <form id="form">
      <div class="user-details">
        
        <div class="input-box">

            <span class="details">Patient ID</span>
  
            <input name="name" type="text" id="PatientID" value="" placeholder="Enter Your 10-Digit Patient ID" pattern="[0-9]{10}" title="10-Digit Patient ID (Phone Number)"
              oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1'); clearResult()">
  
          </div>

        <div class="input-box">

          <span class="details">Age</span>

          <input name="name" type="number" id="Age" value="" placeholder="Enter Your Age"
            oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1'); clearResult()"
            maxlength="3" min="0" max="150" >

        </div>

        <div class="input-box">

            <span class="details">BMI</span>

            <input name="name" type="text" id="BMI" value="" placeholder="Enter BMI (00.0)" 
            oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/[^\d.]/g, '')             // numbers and decimals only
            .replace(/(^[\d]{2})[\d]/g, '$1')   // not more than 2 digits at the beginning
            .replace(/(\..*)\./g, '$1')         // decimal can't exist more than once
            .replace(/(\.[\d]{1})./g, '$1');    // not more than 1 digits after decimal; 
            clearResult()">
        </div>


        <div class="input-box">

          <span class="details">Triceps Skinfold Thickness Measurement</span>

          <input name="name" type="text" id="SkinThickness" value="" placeholder="Enter Skin Thickness (mm)" 
          oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/[^\d.]/g, '')             // numbers and decimals only
          .replace(/(^[\d]{3})[\d]/g, '$1')   // not more than 3 digits at the beginning
          clearResult()">
      </div>


        <div class="input-box">

          <span class="details">Blood Glucose Measurement</span>

          <input name="name" type="number" id="Glucose" value="" placeholder="Enter Blood Glucose Measurement (mg/dL)"
          oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1'); clearResult()"
          pattern="[0-9]{2,3}" min="0" max="999" >

      </div>


      <div class="input-box">

        <span class="details">Diastolic Blood Pressure Measurement</span>

        <input name="name" type="number" id="BloodPressure" value="" placeholder="Enter Diastolic Blood Pressure (Lower Number) (mm/Hg)"
        oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1'); clearResult()"
        pattern="[0-9]{2,3}" min="0" max="999" >

    </div>


    <div class="input-box">

      <span class="details">Insulin</span>

      <input name="name" type="text" id="Insulin" value="" placeholder="Enter Insulin (U/mL)" 
      oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/[^\d.]/g, '')             // numbers and decimals only
      .replace(/(^[\d]{3})[\d]/g, '$1')   // not more than 2 digits at the beginning
      clearResult()">
  </div>


  <div class="input-box">

    <span class="details">Diabetes Pedigree Function</span>

    <input name="name" type="text" id="DiabetesPedigreeFunction" value="" placeholder="Enter Diabetes Pedigree Function (0.000)" 
    oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/[^\d.]/g, '')             // numbers and decimals only
    .replace(/(^[\d]{1})[\d]/g, '$1')   // not more than 1 digits at the beginning
    .replace(/(\..*)\./g, '$1')         // decimal can't exist more than once
    .replace(/(\.[\d]{3})./g, '$1');    // not more than 3 digits after decimal; 
    clearResult()">
</div>


        <div class="input-box">

          <span class="details">Sex</span>

          <select class="dropdown" name="Sex" id="Sex" onchange="clearResult()">

            <option value="" selected disabled hidden>Choose Sex</option>

            <option value=0>Male</option>

            <option value=1>Female</option>


          </select>

        </div>


        <div class="input-box">

          <span class="details">Number of Pregnancies</span>

        <input name="name" type="text" id="Pregnancies" value="" placeholder="Enter Number of Pregnancies (0-99)" 
        oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/[^\d.]/g, '')             // numbers and decimals only
        .replace(/(^[\d]{2})[\d]/g, '$1')   // not more than 2 digits  
        clearResult()">
    </div>




      </div>
      <!--<div class="spinner" style="display: none;"></div>-->

      <div class="spinner" style="display: none;"></div>

      <div class="black-button">
        <input type="submit" value="Predict">
      </div>

    </form>
  </div>
</div>

<footer>
  <%- include('../partials/footer-new') -%>
  
  </footer>

<script>
  document.getElementById("log").innerHTML = ``;
  const spinner = document.querySelector('.spinner');



  function logSubmit(event) {
    event.preventDefault();
    document.getElementById("log").innerHTML = ``;

    const data = {
      PatientID: (document.getElementById("PatientID").value),
      Age: (document.getElementById("Age").value),
      BMI: (document.getElementById("BMI").value),
      SkinThickness: (document.getElementById("SkinThickness").value),
      Glucose: (document.getElementById("Glucose").value),
      BloodPressure: (document.getElementById("BloodPressure").value),
      Insulin: (document.getElementById("Insulin").value),
      DiabetesPedigreeFunction: (document.getElementById("DiabetesPedigreeFunction").value),
      Sex: (document.getElementById("Sex").value),
      Pregnancies: (document.getElementById("Pregnancies")?.value),
    }
    
    let base_url = 'https://ml-model-api-hero.herokuapp.com/diabetes_prediction';
    spinner.style.display = 'block'; // show the spinner
    

    const requestBody = {
      "Age": data?.Age,
      "BMI": data?.BMI,
      "SkinThickness": data?.SkinThickness,
      "Glucose": data?.Glucose,
      "BloodPressure": data?.BloodPressure,
      "Insulin": data?.Insulin,
      "DiabetesPedigreeFunction": data?.DiabetesPedigreeFunction,
      "Pregnancies": data?.Pregnancies
    }

 
    fetch(base_url, {
      method: 'post',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody),

    })
      .then(response => response.json())
      .then(result => {
        console.log(result)
        if (result == 'Patient is diabetic') {
          document.getElementById("log").innerHTML = 'Patient is likely to develop diabetes.';
          spinner.style.display = 'none'; // hide the spinner


        } else if (result == 'Patient is not diabetic') {
          document.getElementById("log").innerHTML = 'Patient is unlikely to develop diabetes.';
          spinner.style.display = 'none'; // hide the spinner
        }


        const body = {
        "Age": data?.Age,
        "BodyMassIndex": data?.BMI,
        "SkinThickness": data?.SkinThickness,
        "Glucose": data?.Glucose,
        "BloodPressure": data?.BloodPressure,
        "Insulin": data?.Insulin,
        "DiabetesPedigreeFunction": data?.DiabetesPedigreeFunction,
        "Pregnancies": data?.Pregnancies,
        "Sex": data?.Sex,
        "phoneNumber": data?.PatientID,
        "ML_result": result

      }

    console.log(body)
        fetch('/DiabetologyData', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        })

      })
      .catch(error => {
        document.getElementById("log").innerHTML = 'Error. Please try again later.';
        // document.getElementById("log").innerHTML = `ERROR: ${error}`;
        spinner.style.display = 'none'; // hide the spinner

      });
  
      
  
    }
  function clearResult() {
    // To clear result
    document.getElementById("log").innerHTML = ``;
  }
  const form = document.getElementById('form');
  form.addEventListener('submit', logSubmit);


</script>



</html>