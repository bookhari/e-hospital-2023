<!-- /* TaskName, code started for adding route to pagename (Ahmed Abdelrahman, Omar Abdelrahman, Khanh Dat Truong) GroupNumber, BMG5109 Medical Systems Innovation, 2023 */ -->
<!DOCTYPE html>
<html>
  
<head>
  <title>Patient Information Form</title>
  <meta charSet="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Register | E-Hospital</title>
  <meta name="author" content="E-Hospital" />

  <meta property="og:url" content="register.html" />
  <meta property="og:site_name" content="E-Hospital" />
  <meta property="og:title" content="E-Hospital" />
  <meta property="og:type" content="website" />
  <meta property="og:image" content="https://img1.wsimg.com/isteam/stock/Ddj9aVd" />
  <meta property="og:locale" content="en_CA" />
  <link href="css/login.css" rel="stylesheet" type="text/css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>

  <style>
    table, th, td {
      border:1px solid black;
    }
  </style>
    
  <script>
    var recordList = [];
    // Run the code when the page finished loading
    $(document).ready(function() {
      // retrived phone number form url
      let params = (new URL(document.location)).searchParams;
      let phoneNumber = params.get("phoneNumber");
  // was "phoneNumber"
      // Get the patient records
      $.ajax({
        url: "/imageRetrieveByPhoneNumber",
        type: 'POST',
        data: {
          phoneNumber: phoneNumber, 
          recordType: "CT-Scan_Breast" // the table name that stores the record
        },
        success: function(data) {
          // console.log(data);
          data.error ? alert(JSON.stringify(data.error)) : display(data.success);
        },
        error: function(xhr, textStatus, errorThrown) {
          // Handle error response from server
          alert(textStatus + ': ' + errorThrown);
        }
      });
    });
    
   // Display the patient records to the front end that allows doctor selected specific record for diagnose
   function display(data) {
      recordList = data;
      if (recordList.length <= 0) {
        alert("This patient has no record, please do the CT-Scan  for the Breast.");
        return;
      }
      console.log(recordList);
      let list = document.getElementById("recordList");
      // Display each record
      for (let i = 0; i < recordList.length; ++i) {
        let tr = document.createElement("tr");
        let image = document.createElement("td");
        //let img = document.createElement("img");
      // Extract the image data from the buffer
        const imageData = recordList[i].file.buffer;
        // Create a data URL from the image data
        const dataURL = `data:image/jpeg;base64,${imageData}`;
        // Create an img element and set its src attribute to the data URL
        const img = document.createElement('img');
        img.src = dataURL;
        img.width = 150;
        img.height = 150;
        //image.innerHTML = "Will be replace by imagee";
        image.appendChild(img)
        let recordDate = document.createElement("td");
        recordDate.innerHTML = recordList[i].RecordDate;
        let action = document.createElement("td");
        let button = document.createElement("input");
        button.type = "button";
        button.value = "Diagnose";
        button.index = i;
        button.setAttribute("onclick", "predict(this.index)")
        action.appendChild(button);
        
        tr.appendChild(image);
        tr.appendChild(recordDate);
        tr.appendChild(action);
        list.appendChild(tr);
      }
    }
    // Send the image to the ML api for the prediction
    async function predict(index) {
      console.log(recordList[index]);
      // Prepare submit data
      const form = new FormData();
      const base64Response = await fetch(`data:image/png;base64,${recordList[index].file.buffer}`);
      const blob = await base64Response.blob();
      form.append('image', blob, recordList[index].file.originalname);
      // Send to the ML API
      $.ajax({
        url: "/connectionTesting",
        type: 'POST',
        enctype: 'multipart/form-data',
        data: form,
        processData: false,
        contentType: false,
        cache: false,
        success: function(data) {
          // console.log(data);
          // data.error ? alert(JSON.stringify(data.error)) : alert(JSON.stringify(data));
          data.error ? alert(JSON.stringify(data.error)) : null;
          storePrediction(data, recordList[index]._id);
          console.log(`Succesful response ${JSON.stringify(data)}`);
          console.log(`Message is: ${JSON.stringify(data)}`);
          var st1=JSON.stringify(data);
          str= st1.replace(/[\[\]""]+/g,''); 
          str2 = str.replace(/[{}()]/g, '').replace(/[\[\]""]+/g,'');
          console.log(str2);         
          console.log(str2);        
          $("#diagnose").val(str2);
        },
        error: function(xhr, textStatus, errorThrown) {
          // Handle error response from server
          alert(textStatus + ': ' + errorThrown);
        }
      });
    }
    // Store the prediction result to the database
    function storePrediction(result, id) {
      console.log(result);
      
      // Retrieved phone number and the current date
      let params = (new URL(document.location)).searchParams;
      let phoneNumber = params.get("phoneNumber");
      let today = new Date();
      const offset = today.getTimezoneOffset();
      today = new Date(today.getTime() - (offset*60*1000)).toISOString();
      // Store to the database
      $.ajax({
        url: "/updateDisease",
        type: 'POST',
        data: {
          phoneNumber: phoneNumber,
          disease: "breast_disease", // the table name that stores the prediction result
          date: today,
          prediction: result.prediction,
          accuracy: result.accuracy, // can be null if not provided
          recordType: "CT-Scan_Breast", // can be null if no record is used for the ML prediction
          recordId: id // can be null if no record is used for the ML prediction
        },
        success: function(data) {
          // console.log(data);
          data.error ? alert(JSON.stringify(data.error)) : alert(data.success);
        },
        error: function(xhr, textStatus, errorThrown) {
          // Handle error response from server
          alert(textStatus + ': ' + errorThrown);
        }
      });
    }
  </script>
  
  <!-- <script src="https://code.jquery.com/jquery-2.2.1.min.js"></script> -->
  <%- include('../partials/header') -%>
</head>
<body>

  <div class="header">
   
    <h1>Breast Diagnostics</h1>
   
  </div>

  <div class="header2">
    <h3>Patient's Information</h3>
   
  </div>
  <div class="container" style="padding-top: 40px;">
    <table id="recordList" style="width:100%">
      <tr>
        <th>Record</th>
        <th>Record Date</th>
        <th>Action</th>
      </tr>

    </table>
  </div>
  <div> 
  
    <div class="outer">
      <!-- <button class="submitBtn" onclick="submit()">Show the result</button> -->
      <div class="result-box">
        <label for="diagnose">Test Result:</label>
        <br> 
        <input type="text" id="diagnose" name="diagnose" placeholder="Result is here" \
        style="border: 2px solid #ccc; border-radius: 4px; padding: 6px 10px;  width: 100%; font-size: 30px; font-weight: 500;
                    color: #27ae60;
                    animation: fadeIn 1s ease-in;box-sizing: border-box; 
                     margin-top: 10px;" disabled="disabled" required>
       </div>
            </form>
          </div>
      </div>

    <footer>
  <%- include('../partials/footer-new') -%>
  
  </footer>
  </div> 
  

</body>
</html>

<style> 
body {
    background-image: url('images/breast.PNG');
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    font-family: 'Montserrat', sans-serif;
    color: #333;
  }

 

  form {
    max-width: 700px;
    margin: 0 auto;
    background-color: #f7f7f7;
    padding: 40px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
  }

.header {
  text-align: center;
  color: #fff;
  font-size: 40px;
  padding: 80px 0;
  background-color: rgba(0, 0, 0, 0.7);
}
h1, h2 {
    font-family: 'Roboto Slab', serif;
    color: #fff;
    font-weight: bold;
    text-align: center;
    margin-bottom: 40px;
  }
  h3 {
    font-family: 'Roboto Slab', serif;
    color: #fff;
    font-weight: bold;
    text-align: center;
    margin-bottom: 40px;
  }


label {
    font-weight: 600;
    display: block;
    margin-bottom: 10px;
    color: #333;
    font-size: 20px;
    line-height: 1.2;
  }



input[type="text"],
input[type="email"],
select,
input[type="date"],
input[type="file"] {
  width: 100%;
  padding: 10px;
  border: none;
  border-radius: 5px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
  margin-bottom: 20px;
}

input[type="submit"] {
    background-color: #006F8A;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  input[type="submit"]:hover {
    background-color: #008CBA;
  }

select {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  background: url("down-arrow.svg") no-repeat right center / 20px;
  padding-right: 30px;
}


input[type="file"] {
  border: 1px solid #ccc;
  background-color: #fff;
  padding: 10px;
  box-shadow: none;
}

input[type="file"]:focus,
input[type="file"]:hover {
  border-color: #008CBA;
}

@media screen and (max-width: 600px) {
  form {
    padding: 10px;
  }

  input[type="text"],
  input[type="email"],
  select,
  input[type="date"],
  input[type="file"] {
    padding: 8px;
  }

  input[type="submit"] {
    padding: 8px;
  }
}

/* Set styles for the container */
.container {
  margin-top: 40px;
  width: 100%;
}

/* Set styles for the table */
table {
  border-collapse: collapse;
  width: 100%;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  font-size: 14px;
  color: #333;
  background-color: #f9f9f9;
}

/* Set styles for the table header */
th {
  background-color: #33465a;
  color: #fff;
  font-weight: bold;
  text-align: left;
  padding: 10px 15px;
  border-bottom: 2px solid #ddd;
}

/* Set styles for the table rows */
tr {
  border-bottom: 1px solid #ddd;
}

/* Set styles for the table cells */
td {
  padding: 10px 15px;
  font-size: 16px; /* increase font size */
}

/* Set hover styles for the table rows */
tr:hover {
  background-color: #f5f5f5;
}

/* Set alternate background color for even rows */
tr:nth-child(even) {
  background-color: #f2f2f2;
}

/* Set border radius for the first and last cells of each row */
td:first-child,
td:last-child {
  border-radius: 5px;
}

/* Add shadow to the table */
table {
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
}

.outer{
margin: 60px 10rem 0;
}
.outer1{
padding-top: 3rem;
}

.input-box {
width: 100%;
background-color: rgb(249, 250, 252);
padding: 20px;
box-sizing: border-box;
margin-bottom: 20px;
border: 1px solid rgb(252, 252, 252);
border-radius: 5px;
}

.input-box .details {
font-weight: bold;
display: block;
margin-bottom: 10px;
color: rgb(17, 2, 2);
}

.submitBtn {
width: 20%;
color: #fff;
border: none;
margin: 0 auto;
font-size: 20px;
font-weight: 500;
cursor: pointer;
background: linear-gradient(-135deg, #100d0de9, #000000);
transition: all 0.3s ease;
}

/* .result-box {
width: 100%;
padding: 10px;
position: center;
margin-top: 0px;
background-color: #ffffff;
border: 1px solid #e1e1e1;
border-radius: 10px;
text-align: left;
} */
.result-box {
border: 2px solid #ccc;
padding: 10px;
margin-bottom: 20px;
background-color: #f5f5f5;
}
</style>