<!DOCTYPE html>
<script>
    window.onload=function(){;
        //document.querySelector("#download").addEventListener('click', generateCSV);
        const forms = document.querySelector('form');
        let selected = [];
        forms.addEventListener('change', event => {
            valueGather();
        });
    }

    const express = require('express');
    const bodyParser = require('body-parser');
    const db = require('./db');

    const app = express();
    const port = 3000;

    app.use(bodyParser.urlencoded({ extended: false }));

    app.post('/update_tumorRecord', (req, res) => {
        const { email, firstName, lastName, radius, texture, perimeter, area, smoothness, compactness, concavity, concavePoints, symmetry, fractalDimension, date, prediction } = req.body;

        db.query('INSERT INTO tumor_records (email, firstName, lastName, radius, texture, perimeter, area, smoothness, compactness, concavity, concavePoints, symmetry, fractalDimension, date, prediction) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', 
            [email, firstName, lastName, radius, texture, perimeter, area, smoothness, compactness, concavity, concavePoints, symmetry, fractalDimension, date, prediction], (err, result) => {
                if (err) {
                    console.log(err);
                    res.render('error', { message: 'An error occurred while updating the tumor record.' });
                } else {
                    console.log(`New tumor record added with ID: ${result.insertId}`);
                }
            }
        );
    });

    app.get('/tumorRecords', (req, res) => {
        db.query('SELECT * FROM tumor_records', (err, results) => {
            if (err) {
                console.log(err);
                res.render('error', { message: 'An error occurred while retrieving tumor records.' });
            } else {
                res.render('tumorRecords', { records: results });
            }
        });
    });

    app.listen(port, () => {
        console.log(`App listening on port ${port}`);
    });
    
    const form = document.getElementById('symptom-form');

    form.addEventListener('submit', async (event) => {
        event.preventDefault();

    // Get the patient ID and password from the form
        const id = document.getElementById('id').value;
        const password = document.getElementById('password').value;

    // Call the API to get the tumor record for the patient
        const response = await fetch('/get_tumorRecord', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ id, password })
        });

    // Extract the tumor record from the API response
        const data = await response.json();
        const tumorRecord = data.result[0];

    // Populate the input fields with the tumor record values
        document.getElementById('radius').value = tumorRecord.radius;
        document.getElementById('texture').value = tumorRecord.texture;
    });


    function yell() {
        valueGather();
        alert(bc_diagnose(selected));
     }  
    
    function valueClear() {
        document.querySelector('form').reset();
    }

    function valueGather(){
        const checked = document.querySelectorAll('input[type="number"]');
        selected = Array.from(checked).map(x => x.value);
        console.log(selected);
    }

    //Decision tree for malignant vs. benign decision.
    function bc_diagnose(ins) {
        if (ins[10] <= 0.049) {
            if (ins[6] <= 694.6) {
                if (ins[10] <= 0.045) {
                    if (ins[4] <= 22.455) {
                    return 1;
                } else {
                    if (ins[4] <= 22.575) {
                    return 0;
                } else {
                     return 1;
                }
            }
        } else {
            if (ins[4] <= 24.71) {
                return 1;
            } else {
                return 0;
            }
        }
            } else {
                if (ins[3] <= 16.08) {
                    return 0;
                } else {
                    if (ins[4] <= 19.83) {
                        return 1;
                    } else {
                        return 0;
                    }
                }
            }
            } else {
                if (ins[4] <= 14.16) {
                    if (ins[9] <= 0.174) {
                        return 1;
                    } else {
                        return 0;
                    }
                } else {
                    if (ins[5] <= 88.37) {
                        if (ins[7] <= 0.108) {
                            return 1;
                        } else {
                            if (ins[9] <= 0.107) {
                                return 1;
                            } else {
                                return 0;
                            }
                        }
                    } else {
                        if (ins[4] <= 16.235) {
                            if (ins[10] <= 0.075) {
                                if (ins[3] <= 14.22) {
                                    return 0;
                                } else {
                                    return 1;
                                }
                            } else {
                                return 0;
                            }
                        } else {
                            if (ins[7] < 0.088) {
                                if (ins[9] <= 0.125) {
                                    return 0;
                                } else {
                                    return 1;
                                }
                            } else {
                                return 0;
                            }
                        }
                    }
                }           
            }
    }

        
    //     const otherCheckbox = document.querySelector('#other');
    //     const otherText = document.querySelector('#otherValue');
    //     otherText.style.visibility = 'hidden';

    //     otherCheckbox.addEventListener('change', () => {
    //         if (otherCheckbox.checked) {
    //             otherText.style.visibility = 'visible';
    //             otherText.value = '';
    //         } else {
    //             otherText.style.visibility = 'hidden';
    //         }
    //     });
    // }
  

//   function generateCSV(e){
//     console.log('hi')
//     e.preventDefault();
//     const formdata = new FormData(document.getElementById('symptom-form'));
//     const formObj = Object.fromEntries(formdata);
//     const len = Object.keys(formObj).length/2;
//     let formValues = '';
//     for(let i=1; i<= len; i++){
//        // comma separated values and break line
//         formValues += formObj['symptom'+i] +','+formObj['Have it'+i]+ "\r\n";
//     }
//     downloadCSV(formValues);
//   }
  
//    function downloadCSV(formValues){
//      const columnNames = "Symptom, Has it";
//      let csvContent = "data:text/csv;charset=utf-8,";
//      csvContent += columnNames + "\r\n";
//      csvContent += formValues + "\r\n";

//      const encodedUri = encodeURI(csvContent);
//      var link = document.createElement("a");
//      link.setAttribute("href", encodedUri);
//      link.setAttribute("download", "my-form-data.csv");
//      document.body.appendChild(link);
//      link.click();
//     // link.remove();
//   }

</script>
<html lang="en">
<head>
    <%- include('../partials/header') -%>

    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        input[type=number] {
            background-color:rgb(235, 231, 231);
            border: solid 2px black;
        }


        #symptom-form {
        background-color:whitesmoke;
        padding: 30px;
        border: solid black;
        }

        .symptom{
            width: 90px;
            background-color:rgb(235, 231, 231);
            border: solid 2px black;
        }

        #download {
            text-align: center;
        }

        #download-btn {
            padding: 10px;
            width: 40%;
            background-color: rgb(255, 255, 255);
            border: solid 1px black;
            display: inline-block;
            cursor: pointer;
            text-align: center;
            box-shadow: 0 9px #999;
        }

        #download-btn:active {
            box-shadow: 0 3px #666;
            transform: translateY(4px);
        }


    </style>
 
</head>
<body>
   

    <div style="margin: auto;
    margin-top: 50px;
    display: flex;
    width:100%;
    padding: 30px;"
    class="container-fluid">
        <div class="row"  style="margin: auto;
        float: left;
        width: 60%;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 10px;">
            <form method="POST" action="/update_tumorRecord" id="symptom-form">
                <label for="phone">Phone #</label>
                <input type="text" name='phone' id="phone" class="symptom"><br>
    
                <label for="email">Email</label>
                <input type="text" name='email' id="email" class="symptom"><br>
                <label for="firstName">First Name</label>
                <input type="text" name='firstName' id="firstName" class="symptom"><br>
                <label for="lastName">Last Name</label>
                <input type="text" name='lastName' id="lastName" class="symptom"><br>

                <label for="radius">Radius</label>
                <input type="number" name="radius" step= "0.000001" min="0" id="radius" class="symptom" value="0"><br>

                <label for="texture">Texture</label>
                <input type="number" name="texture" step= "0.000001" min="0" id="texture" class="symptom" value="0"><br>
                <label for="perimeter">Perimeter</label>
                <input type="number" name="perimeter" step= "0.000001" min="0" id="perimeter" class="symptom" value="0"><br>
                <label for="area">Area</label>
                <input type="number" name="area" step= "0.000001" min="0" id="area" class="symptom" value="0"><br>
                <label for="smoothness">Smoothness</label>
                <input type="number" name="smoothness" step= "0.000001" min="0" id="smoothness" class="symptom" value="0"><br>
                <label for="compactness">Compactness</label>
                <input type="number" name="compactness" step= "0.000001" min="0" id="compactness" class="symptom" value="0"><br>
                <label for="concavity">Concavity</label>
                <input type="number" name="concavity" step= "0.000001" min="0" id="concavity" class="symptom" value="0"><br>
                <label for="concave_points">Concave Points</label>
                <input type="number" name="concave_points" step= "0.000001" min="0" id="concave_points" class="symptom" value="0"><br>
                <label for="symmetry">Symmetry</label>
                <input type="number" name="symmetry" step= "0.000001" min="0" id="symmetry" class="symptom" value="0"><br>
                <label for="fractal_dimension">Fractal Dimension</label>
                <input type="number" name="fractal_dimension" step= "0.000001" min="0" id="fractal_dimension" class="symptom" value="0"><br>
                <label for="record">Date</label>
                <input type="date" name="record" id="record" class="symptom">
                
                
                <div id="download">
                    <input type="submit" id="download-btn" onclick="valueGather()">
                    <input type="button" id="download-btn" value="Reset" onclick="valueClear()">
                </div>
            </form>
            <button onclick="yell()">Predict</button>
        </div>
      </div>

    <footer>
        <%- include('../partials/footer-new') -%>
        
      </footer>
</body>
</html>